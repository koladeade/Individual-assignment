#!/usr/bin/python3
class Student:
    def __init__(self, email, names):
        self.email = email
        self.names = names
        self.courses_registered = {}
        self.GPA = 0.0

    def register_for_course(self, course_name, grade):
        self.courses_registered[course_name] = grade

    def calculate_GPA(self):
        if self.courses_registered:
            self.GPA = sum(self.courses_registered.values()) / len(self.courses_registered)
        else:
            self.GPA = 0.0


class Course:
    def __init__(self, name, trimester, credits):
        self.name = name
        self.trimester = trimester
        self.credits = credits


class GradeBook:
    def __init__(self):
        self.student_list = []
        self.course_list = []

    def add_student(self, email, names):
        student = Student(email, names)
        self.student_list.append(student)

    def add_course(self, name, trimester, credits):
        course = Course(name, trimester, credits)
        self.course_list.append(course)

    def register_student_for_course(self, email, course_name, grade):
        student = next((s for s in self.student_list if s.email == email), None)
        if student:
            student.register_for_course(course_name, grade)

    def calculate_GPA(self):
        for student in self.student_list:
            student.calculate_GPA()

    def calculate_ranking(self):
        return sorted(self.student_list, key=lambda s: s.GPA, reverse=True)

    def search_by_grade(self, course_name, grade):
        return [s for s in self.student_list if course_name in s.courses_registered and s.courses_registered[course_name] == grade]

    def generate_transcript(self, email):
        student = next((s for s in self.student_list if s.email == email), None)
        if student:
            print(f"\nTranscript for {student.names} ({student.email}):")
            for course, grade in student.courses_registered.items():
                print(f"{course}: {grade}")
            print(f"GPA: {student.GPA:.2f}")


def display_menu():
    print("\nGrade Book Application")
    print("1. Add Student")
    print("2. Add Course")
    print("3. Register Student for Course")
    print("4. Calculate Ranking")
    print("5. Search by Grade")
    print("6. Generate Transcript")
    print("7. Exit")


def main():
    grade_book = GradeBook()

    while True:
        display_menu()
        choice = input("Choose an action (1-7): ")

        if choice == "1":
            email = input("Enter student email: ")
            names = input("Enter student names: ")
            grade_book.add_student(email, names)

        elif choice == "2":
            name = input("Enter course name: ")
            trimester = input("Enter trimester: ")
            credits = int(input("Enter credits: "))
            grade_book.add_course(name, trimester, credits)

        elif choice == "3":
            email = input("Enter student email: ")
            course_name = input("Enter course name: ")
            grade = float(input("Enter grade: "))
            grade_book.register_student_for_course(email, course_name, grade)

        elif choice == "4":
            grade_book.calculate_GPA()
            ranked_students = grade_book.calculate_ranking()
            print("\nRanking of students:")
            for student in ranked_students:
                print(f"{student.names}: {student.GPA:.2f}")

        elif choice == "5":
            course_name = input("Enter course name: ")
            grade = float(input("Enter grade to search: "))
            students = grade_book.search_by_grade(course_name, grade)
            print(f"\nStudents with grade {grade} in {course_name}:")
            for student in students:
                print(student.names)

        elif choice == "6":
            email = input("Enter student email: ")
            grade_book.generate_transcript(email)

        elif choice == "7":
            print("Exiting the application.")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
